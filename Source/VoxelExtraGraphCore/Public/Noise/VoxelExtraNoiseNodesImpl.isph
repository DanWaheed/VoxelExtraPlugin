// Copyright Voxel Plugin, Inc. All Rights Reserved.

#pragma once

#include "VoxelMinimal.isph"

// ReSharper disable CppCStyleCast
// ReSharper disable CppVariableCanBeMadeConstexpr

// Noise functions below are based off FastNoise2, whose license is below
//
// MIT License
//
// Copyright (c) 2020 Jordan Peck
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// 2D IQ

FORCEINLINE float VoxelExtraNoiseNodes_Hash(int32 Seed, int32 x, int32 y) 
{
    const int32 PRIME1 = 73856093;
    const int32 PRIME2 = 19349663;
    const int32 PRIME3 = 2039179;

    int32 hash = x * PRIME1 + y * PRIME2 + Seed * PRIME3;
    hash = (hash ^ (hash >> 13)) * (hash * PRIME2 + PRIME1);
    return (hash & 0x7FFFFFFF) / 2147483648.0f;
}

FORCEINLINE float VoxelExtraNoiseNodes_Smoothstep(float t) 
{
    return t * t * (3.0f - 2.0f * t);
}

FORCEINLINE float VoxelExtraNoiseNodes_CubicInterpolation(float t) 
{
    return t * t * (3.0f - 2.0f * t);
}

FORCEINLINE float VoxelExtraNoiseNodes_Get2DIQ(const int32 Seed, float2 Position) 
{
    int32 x0 = (int32)floor(Position.x);
    int32 y0 = (int32)floor(Position.y);

    int32 x1 = x0 + 1;
    int32 y1 = y0 + 1;

    float tx = Position.x - (float)x0;
    float ty = Position.y - (float)y0;

    // Calculate hash values
    float c00 = VoxelExtraNoiseNodes_Hash(Seed, x0, y0);
    float c10 = VoxelExtraNoiseNodes_Hash(Seed, x1, y0);
    float c01 = VoxelExtraNoiseNodes_Hash(Seed, x0, y1);
    float c11 = VoxelExtraNoiseNodes_Hash(Seed, x1, y1);

    // Smooth interpolation in x-direction
    float sx0 = VoxelExtraNoiseNodes_Smoothstep(tx);
    float sx1 = VoxelExtraNoiseNodes_Smoothstep(tx - 1.0f);

    // Interpolate along the y-direction
    float sy0 = VoxelExtraNoiseNodes_CubicInterpolation(ty);
    float sy1 = VoxelExtraNoiseNodes_CubicInterpolation(ty - 1.0f);

    // Final interpolation using bilinear interpolation
    float lerp0 = c00 + sx0 * (c10 - c00);
    float lerp1 = c01 + sx0 * (c11 - c01);

    return lerp0 + sy0 * (lerp1 - lerp0);
}

// Open Simplex 2D

#define SQRT3 1.7320508075688772935274463415059f
#define G2  (3.0f - SQRT3) / 6.0f
#define F2  0.5f * (SQRT3 - 1.0f)

FORCEINLINE int32 VoxelExtraNoiseNodes_FastFloor(float x) 
{
    int xi = (int32)x;
    return x < xi ? xi - 1 : xi;
}

FORCEINLINE int32 VoxelExtraNoiseNodes_SimplexHash(int32 seed, int32 x, int32 y)
{
    int32 hash = seed ^ 12345; // XOR with a prime number
    hash ^= (hash << 5) + x;
    hash ^= (hash << 5) + y;
    return  (hash - 255) * (hash / 255);
}

FORCEINLINE float VoxelExtraNoiseNodes_Grad(int32 hash, float x, float y) 
{
    const int32 h = hash & 7; // Gradient value 0-7
    const float u = h < 4 ? x : y; // Component of the gradient along the x or y axis
    const float v = h < 4 ? y : x; // Component of the gradient along the y or x axis
    return ((h & 1) ? -u : u) + ((h & 2) ? -2.0f * v : 2.0f * v);
}

FORCEINLINE float VoxelExtraNoiseNodes_SimplexNoise2D(const int32 Seed, const float2& Position) 
{
    const float s = (Position.x + Position.y) * F2;
    const int32 i = VoxelExtraNoiseNodes_FastFloor(Position.x + s);
    const int32 j = VoxelExtraNoiseNodes_FastFloor(Position.y + s);

    const float t = (i + j) * G2;
    const float X0 = i - t;  // Unskewed grid cell coordinates
    const float Y0 = j - t;
    const float x0 = Position.x - X0;  // Relative x, y coordinates
    const float y0 = Position.y - Y0;

    int32 i1, j1;  // Offsets for second (middle) corner of simplex in (i, j) coords
    if (x0 > y0) {
        i1 = 1;
        j1 = 0;
    } else {
        i1 = 0;
        j1 = 1;
    }

    const float x1 = x0 - i1 + G2;      // Offsets for middle corner in (x, y) unskewed coords
    const float y1 = y0 - j1 + G2;
    const float x2 = x0 - 1.0f + 2.0f * G2;  // Offsets for last corner in (x, y) unskewed coords
    const float y2 = y0 - 1.0f + 2.0f * G2;

    const int32 gi0 = VoxelExtraNoiseNodes_SimplexHash(Seed, i, j); // Use hash function for gradient indices
    const int32 gi1 = VoxelExtraNoiseNodes_SimplexHash(Seed, i + i1, j + j1);
    const int32 gi2 = VoxelExtraNoiseNodes_SimplexHash(Seed, i + 1, j + 1);
    
    // Calculate the contribution from each corner
    float n0, n1, n2;

    float t0 = 0.5f - x0 * x0 - y0 * y0;
    if (t0 < 0) n0 = 0.0f;
    else {
        t0 *= t0;
        n0 = t0 * t0 * VoxelExtraNoiseNodes_Grad(gi0, x0, y0);
    }

    float t1 = 0.5f - x1 * x1 - y1 * y1;
    if (t1 < 0) n1 = 0.0f;
    else {
        t1 *= t1;
        n1 = t1 * t1 * VoxelExtraNoiseNodes_Grad(gi1, x1, y1);
    }

    float t2 = 0.5f - x2 * x2 - y2 * y2;
    if (t2 < 0) n2 = 0.0f;
    else {
        t2 *= t2;
        n2 = t2 * t2 * VoxelExtraNoiseNodes_Grad(gi2, x2, y2);
    }

    float total = n0 + n1 + n2;

    float min_noise_value = -0.022109f;
    float max_noise_value = 0.022109f;
    return 2.0f * (total - min_noise_value) / (max_noise_value - min_noise_value) - 1.0f;
}

// Open Simplex Fractal 2D

FORCEINLINE float VoxelExtraNoiseNodes_SimplexFractal2D(const int32 Seed, const float2& Position, int32 Octaves, float Lacunarity, float Persistence) 
{
    float amplitude = 1.0f;
    float frequency = 1.0f;
    float noiseValue = 0.0f;

    for (int32 i = 0; i < Octaves; ++i) {
        noiseValue += amplitude * VoxelExtraNoiseNodes_SimplexNoise2D(Seed, Position * frequency);
        amplitude *= Persistence;
        frequency *= Lacunarity;
    }

    return noiseValue / 2.0f;
}